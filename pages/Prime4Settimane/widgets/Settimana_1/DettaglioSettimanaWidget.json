{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 331,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{ \"data\": \"{{TabellaSettimane.triggeredRow}}\" }",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onInviaClick"
    }
  ],
  "events": [
    "onInviaClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "jwwzragbmc",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 112,
  "mobileLeftColumn": 7,
  "mobileRightColumn": 30,
  "mobileTopRow": 82,
  "needsErrorInfo": false,
  "onInviaClick": "",
  "originalBottomRow": 331,
  "originalTopRow": 7,
  "parentColumnSpace": 20.125,
  "parentId": "fiz98bwyop",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "#root {\n  height: 100%;\n}\n\n.custom-table-wrapper {\n  background-color: var(--appsmith-theme-backgroundColor, #ffffff);\n  padding: 16px;\n  border-radius: var(--appsmith-theme-borderRadius);\n  height: 100%;\n  overflow-y: auto;\n  font-family: inherit;\n  color: var(--appsmith-theme-textColor, #333);\n}\n\n.detail-table {\n  width: 100%;\n  border-collapse: collapse;\n  table-layout: fixed;\n}\n\n.detail-table th, .detail-table td {\n  border: 1px solid #E0E0E0;\n  padding: 10px;\n  text-align: left;\n  vertical-align: middle;\n  word-wrap: break-word;\n}\n\n.detail-table th {\n  background-color: #FAFAFA;\n  font-weight: 600;\n  width: 30%;\n}\n\n.star-rating {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\n\n.star {\n  display: inline-block;\n  cursor: pointer;\n  font-size: 1.7em;\n  color: #ffd700;\n  transition: transform 0.1s;\n}\n\n.star.inactive {\n  color: #e0e0e0;\n}\n\ninput[type=text], textarea {\n  font-size: 1em;\n  border: 1px solid #d0d0d0;\n  background: #fff;\n  border-radius: 4px;\n  width: 100%;\n  padding: 6px 8px;\n  resize: vertical;\n  box-sizing: border-box;\n}\n\n.button-invia {\n  display: block;\n  margin: 20px auto 0 auto;\n  background: var(--appsmith-theme-primaryColor, #754ffe);\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 12px 28px;\n  font-weight: bold;\n  font-size: 1.1em;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.04);\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.button-invia:hover {\n  background: var(--appsmith-theme-primaryColorHover, #593cbe);\n}",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\nfunction parseData(obj) {\n  if (typeof obj === 'string') {\n    try {\n      const parsed = JSON.parse(obj);\n      if (parsed.data && typeof parsed.data === 'string') {\n        return JSON.parse(parsed.data);\n      }\n      return parsed;\n    } catch {\n      return {\n        error: \"Errore di parsing JSON\"\n      };\n    }\n  } else if (obj && typeof obj.data === 'string') {\n    try {\n      return JSON.parse(obj.data);\n    } catch {\n      return {\n        error: \"Errore di parsing JSON\"\n      };\n    }\n  }\n  return obj;\n}\nfunction StarRating({\n  value = 0,\n  onChange\n}) {\n  // Component for rendering 1 to 5 clickable stars\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"star-rating\"\n  }, [1, 2, 3, 4, 5].map(star => /*#__PURE__*/React.createElement(\"span\", {\n    key: star,\n    className: \"star\" + (value >= star ? \"\" : \" inactive\"),\n    onClick: () => onChange(star),\n    title: `Valuta {star}/5`\n  }, \"\\u2605\")));\n}\nfunction DetailsTable({\n  fields,\n  onFieldChange,\n  editingNotes,\n  onNoteFocus,\n  onNoteChange,\n  onNoteBlur\n}) {\n  function renderInput(key, value) {\n    const noteMatch = key.match(/^[12].*Note.*/i);\n    const scoreMatch = key.match(/^[12](?!.*Note).*/i);\n    if (noteMatch) {\n      // Campo editabile: l'aggiornamento del modello avviene SOLO al blur\n      return /*#__PURE__*/React.createElement(\"textarea\", {\n        value: key in editingNotes ? editingNotes[key] : value ?? '',\n        onFocus: () => onNoteFocus(key),\n        onChange: e => onNoteChange(key, e.target.value),\n        onBlur: () => onNoteBlur(key),\n        rows: 2,\n        placeholder: \"Scrivi una nota...\"\n      });\n    } else if (scoreMatch) {\n      // Stelle da 1 a 5, aggiorna subito il modello\n      return /*#__PURE__*/React.createElement(StarRating, {\n        value: parseInt(value) || 0,\n        onChange: val => onFieldChange(key, val)\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"span\", null, String(value ?? \"\"));\n    }\n  }\n  // Nessuna funzionalità drag/drop: la tabella non è riordinabile\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"detail-table\"\n  }, /*#__PURE__*/React.createElement(\"tbody\", null, Object.entries(fields).map(([key, value]) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: key\n  }, /*#__PURE__*/React.createElement(\"th\", null, key), /*#__PURE__*/React.createElement(\"td\", null, renderInput(key, value))))));\n}\nfunction App() {\n  const [fields, setFields] = React.useState(() => parseData(appsmith.model.data));\n  // Stato di editing temporaneo locale per le note\n  const [editingNotes, setEditingNotes] = React.useState({});\n  React.useEffect(() => {\n    setFields(parseData(appsmith.model.data));\n    setEditingNotes({});\n  }, [appsmith.model.data]);\n\n  // Aggiorna campo in fields (stelle o blur note)\n  function updateField(key, value) {\n    const newFields = {\n      ...fields,\n      [key]: value\n    };\n    setFields(newFields);\n    appsmith.updateModel({\n      data: JSON.stringify(newFields)\n    });\n  }\n  function handleNoteFocus(key) {\n    setEditingNotes(old => ({\n      ...old,\n      [key]: fields[key] ?? \"\"\n    }));\n  }\n  function handleNoteChange(key, value) {\n    setEditingNotes(old => ({\n      ...old,\n      [key]: value\n    }));\n  }\n  function handleNoteBlur(key) {\n    updateField(key, editingNotes[key]);\n    setEditingNotes(old => {\n      const obj = {\n        ...old\n      };\n      delete obj[key];\n      return obj;\n    });\n  }\n\n  // Pulsante per inviare i dati attuali del widget tramite una query\n  function handleInviaClick() {\n    // Trigger un evento Appsmith custom (da collegare a una query)\n    appsmith.triggerEvent(\"onInviaClick\", {\n      valori: fields\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-table-wrapper\"\n  }, /*#__PURE__*/React.createElement(DetailsTable, {\n    fields: fields,\n    onFieldChange: updateField,\n    editingNotes: editingNotes,\n    onNoteFocus: handleNoteFocus,\n    onNoteChange: handleNoteChange,\n    onNoteBlur: handleNoteBlur\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-invia\",\n    onClick: handleInviaClick,\n    type: \"button\"\n  }, \"Invia\"));\n}\nfunction renderApp() {\n  ReactDOM.render(/*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n}\nappsmith.onReady(renderApp);\nappsmith.onModelChange(renderApp);"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 7,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "#root {\n  height: 100%;\n}\n\n.custom-table-wrapper {\n  background-color: var(--appsmith-theme-backgroundColor, #ffffff);\n  padding: 16px;\n  border-radius: var(--appsmith-theme-borderRadius);\n  height: 100%;\n  overflow-y: auto;\n  font-family: inherit;\n  color: var(--appsmith-theme-textColor, #333);\n}\n\n.detail-table {\n  width: 100%;\n  border-collapse: collapse;\n  table-layout: fixed;\n}\n\n.detail-table th, .detail-table td {\n  border: 1px solid #E0E0E0;\n  padding: 10px;\n  text-align: left;\n  vertical-align: middle;\n  word-wrap: break-word;\n}\n\n.detail-table th {\n  background-color: #FAFAFA;\n  font-weight: 600;\n  width: 30%;\n}\n\n.star-rating {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\n\n.star {\n  display: inline-block;\n  cursor: pointer;\n  font-size: 1.7em;\n  color: #ffd700;\n  transition: transform 0.1s;\n}\n\n.star.inactive {\n  color: #e0e0e0;\n}\n\ninput[type=\"text\"], textarea {\n  font-size: 1em;\n  border: 1px solid #d0d0d0;\n  background: #fff;\n  border-radius: 4px;\n  width: 100%;\n  padding: 6px 8px;\n  resize: vertical;\n  box-sizing: border-box;\n}\n\n.button-invia {\n  display: block;\n  margin: 20px auto 0 auto;\n  background: var(--appsmith-theme-primaryColor, #754ffe);\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 12px 28px;\n  font-weight: bold;\n  font-size: 1.1em;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.04);\n  cursor: pointer;\n  transition: background 0.2s;\n}\n.button-invia:hover {\n  background: var(--appsmith-theme-primaryColorHover, #593cbe);\n}\n",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\nfunction parseData(obj) {\n  if (typeof obj === 'string') {\n    try {\n      const parsed = JSON.parse(obj);\n      if (parsed.data && typeof parsed.data === 'string') {\n        return JSON.parse(parsed.data);\n      }\n      return parsed;\n    } catch {\n      return { error: \"Errore di parsing JSON\" }\n    }\n  } else if (obj && typeof obj.data === 'string') {\n    try {\n      return JSON.parse(obj.data);\n    } catch {\n      return { error: \"Errore di parsing JSON\" }\n    }\n  }\n  return obj;\n}\n\nfunction StarRating({ value = 0, onChange }) {\n  // Component for rendering 1 to 5 clickable stars\n  return (\n    <div className=\"star-rating\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <span\n          key={star}\n          className={\"star\" + (value >= star ? \"\" : \" inactive\")}\n          onClick={() => onChange(star)}\n          title={`Valuta {star}/5`}\n        >\n          ★\n        </span>\n      ))}\n    </div>\n  );\n}\n\nfunction DetailsTable({ fields, onFieldChange, editingNotes, onNoteFocus, onNoteChange, onNoteBlur }) {\n  function renderInput(key, value) {\n    const noteMatch = key.match(/^[12].*Note.*/i);\n    const scoreMatch = key.match(/^[12](?!.*Note).*/i);\n    if (noteMatch) {\n      // Campo editabile: l'aggiornamento del modello avviene SOLO al blur\n      return (\n        <textarea\n          value={key in editingNotes ? editingNotes[key] : value ?? ''}\n          onFocus={() => onNoteFocus(key)}\n          onChange={e => onNoteChange(key, e.target.value)}\n          onBlur={() => onNoteBlur(key)}\n          rows={2}\n          placeholder=\"Scrivi una nota...\"\n        />\n      );\n    } else if (scoreMatch) {\n      // Stelle da 1 a 5, aggiorna subito il modello\n      return (\n        <StarRating\n          value={parseInt(value) || 0}\n          onChange={val => onFieldChange(key, val)}\n        />\n      );\n    } else {\n      return <span>{String(value ?? \"\")}</span>;\n    }\n  }\n  // Nessuna funzionalità drag/drop: la tabella non è riordinabile\n  return (\n    <table className=\"detail-table\">\n      <tbody>\n        {Object.entries(fields).map(([key, value]) => (\n          <tr key={key}>\n            <th>{key}</th>\n            <td>{renderInput(key, value)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  const [fields, setFields] = React.useState(() => parseData(appsmith.model.data));\n  // Stato di editing temporaneo locale per le note\n  const [editingNotes, setEditingNotes] = React.useState({});\n\n  React.useEffect(() => {\n    setFields(parseData(appsmith.model.data));\n    setEditingNotes({});\n  }, [appsmith.model.data]);\n\n  // Aggiorna campo in fields (stelle o blur note)\n  function updateField(key, value) {\n    const newFields = { ...fields, [key]: value};\n    setFields(newFields);\n    appsmith.updateModel({ data: JSON.stringify(newFields) });\n  }\n\n  function handleNoteFocus(key) {\n    setEditingNotes((old) => ({ ...old, [key]: fields[key] ?? \"\" }));\n  }\n  function handleNoteChange(key, value) {\n    setEditingNotes((old) => ({ ...old, [key]: value }));\n  }\n  function handleNoteBlur(key) {\n    updateField(key, editingNotes[key]);\n    setEditingNotes((old) => {\n      const obj = { ...old };\n      delete obj[key];\n      return obj;\n    });\n  }\n\n  // Pulsante per inviare i dati attuali del widget tramite una query\n  function handleInviaClick() {\n    // Trigger un evento Appsmith custom (da collegare a una query)\n    appsmith.triggerEvent(\"onInviaClick\", { valori: fields });\n  }\n\n  return (\n    <div className=\"custom-table-wrapper\">\n      <DetailsTable\n        fields={fields}\n        onFieldChange={updateField}\n        editingNotes={editingNotes}\n        onNoteFocus={handleNoteFocus}\n        onNoteChange={handleNoteChange}\n        onNoteBlur={handleNoteBlur}/>\n      <button className=\"button-invia\" onClick={handleInviaClick} type=\"button\">Invia</button>\n    </div>\n  );\n}\n\nfunction renderApp() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n\nappsmith.onReady(renderApp);\nappsmith.onModelChange(renderApp);\n"
  },
  "version": 1,
  "widgetId": "o077uwuaep",
  "widgetName": "DettaglioSettimanaWidget"
}